//! `parse_tests.rs` is generated by build.rs
#[test]
fn bad_syntax_unescaped_angle_test() {
    let info = xtest::load("unescaped-angle");
    let xml_str = info.read_xml_file();
    let parse_result = exile::parse_str(xml_str.as_str());
    assert!(parse_result.is_err());
    let err = parse_result.err().unwrap();
    match err {
        exile::error::Error::Parse(parse_error) => {
            assert_eq!(parse_error.xml_site.position, 95);
            assert_eq!(parse_error.xml_site.line, 4);
            assert_eq!(parse_error.xml_site.column, 39);
        }
        _ => panic!("Error was expected to be of type exile::error::Error::Parse, but was not."),
    }
}

#[test]
fn good_syntax_escapes_test() {
    let info = xtest::load("escapes");
    let xml_str = info.read_xml_file();
    let parse_result = exile::parse_str(xml_str.as_str());
    if let Err(e) = parse_result {
        panic!("expected parse_result to be Ok, got Err: {}", e);
    }
    let actual = parse_result.unwrap();
    let expected = &info.metadata.expected.unwrap();
    let equal = expected == &actual;
    if !equal {
        let expected_str = expected.to_string();
        let actual_str = actual.to_string();
        if expected_str != actual_str {
            assert_eq!(expected_str, actual_str);
        } else {
            assert!(equal);
        }
    }
}

#[test]
fn bad_syntax_angle_in_attribute_value_test() {
    let info = xtest::load("angle-in-attribute-value");
    let xml_str = info.read_xml_file();
    let parse_result = exile::parse_str(xml_str.as_str());
    assert!(parse_result.is_err());
    let err = parse_result.err().unwrap();
    match err {
        exile::error::Error::Parse(parse_error) => {
            assert_eq!(parse_error.xml_site.position, 51);
            assert_eq!(parse_error.xml_site.line, 2);
            assert_eq!(parse_error.xml_site.column, 12);
        }
        _ => panic!("Error was expected to be of type exile::error::Error::Parse, but was not."),
    }
}

#[test]
fn good_syntax_ezfile_test() {
    let info = xtest::load("ezfile");
    let xml_str = info.read_xml_file();
    let parse_result = exile::parse_str(xml_str.as_str());
    if let Err(e) = parse_result {
        panic!("expected parse_result to be Ok, got Err: {}", e);
    }
    let actual = parse_result.unwrap();
    let expected = &info.metadata.expected.unwrap();
    let equal = expected == &actual;
    if !equal {
        let expected_str = expected.to_string();
        let actual_str = actual.to_string();
        if expected_str != actual_str {
            assert_eq!(expected_str, actual_str);
        } else {
            assert!(equal);
        }
    }
}
